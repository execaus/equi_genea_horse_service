// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHorseGender = `-- name: CreateHorseGender :one
INSERT INTO horse_gender (name, description)
VALUES ($1, $2)
RETURNING id, name, description
`

type CreateHorseGenderParams struct {
	Name        string
	Description pgtype.Text
}

func (q *Queries) CreateHorseGender(ctx context.Context, arg CreateHorseGenderParams) (HorseGender, error) {
	row := q.db.QueryRow(ctx, createHorseGender, arg.Name, arg.Description)
	var i HorseGender
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getHorseGenderList = `-- name: GetHorseGenderList :many
SELECT id, name, description
FROM horse_gender
ORDER BY name
`

func (q *Queries) GetHorseGenderList(ctx context.Context) ([]HorseGender, error) {
	rows, err := q.db.Query(ctx, getHorseGenderList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HorseGender
	for rows.Next() {
		var i HorseGender
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
